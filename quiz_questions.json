[{"id":557,"category_id":30,"question":": Какая из следующих ошибок является распространенной ошибкой в ООП?\nОТВЕТ: Нарушение принципа единственной ответственности\nDIFFICULTY: medium\nSCORE: 10\nOPTIONS:\n1. Нарушение принципа единственной ответственности\n2. Использование слишком большого количества наследования\n3. Неправильное использование абстрактных классов\n4. Отсутствие комментариев в коде","correct_answer":"Нарушение принципа единственной ответственности","score":10,"options":["Отсутствие комментариев в коде","Неправильное использование абстрактных классов","Нарушение принципа единственной ответственности","Использование слишком большого количества наследования"],"difficulty":"medium"},{"id":553,"category_id":30,"question":": Какая из следующих характеристик является преимуществом ООП?\nОТВЕТ: Модульность\nDIFFICULTY: easy\nSCORE: 5\nOPTIONS:\n1. Модульность\n2. Быстродействие\n3. Сложность\n4. Отсутствие гибкости","correct_answer":"Модульность","score":5,"options":["Отсутствие гибкости","Сложность","Модульность","Быстродействие"],"difficulty":"easy"},{"id":561,"category_id":30,"question":": Каковы основные принципы проектирования программного обеспечения, которые следует учитывать при разработке ООП-систем?\nОТВЕТ: SOLID (Единственная ответственность, Открыто-закрытый принцип, Принцип подстановки Лисков, Интерфейс сегрегации, Инверсия зависимостей)\nDIFFICULTY: hard\nSCORE: 15\nOPTIONS:\n1. SOLID (Единственная ответственность, Открыто-закрытый принцип, Принцип подстановки Лисков, Интерфейс сегрегации, Инверсия зависимостей)\n2. DRY (Не повторяйся), KISS (Держи это простым, глупым), YAGNI (Ты это не изобретешь)\n3. GRASP (Ответственность, Создатель, Выбор, Агрегация, Полиморфизм)\n4. GOF (Порождающие, Структурные, Поведенческие)","correct_answer":"SOLID (Единственная ответственность, Открыто-закрытый принцип, Принцип подстановки Лисков, Интерфейс сегрегации, Инверсия зависимостей)","score":15,"options":["GRASP (Ответственность, Создатель, Выбор, Агрегация, Полиморфизм)","SOLID (Единственная ответственность, Открыто-закрытый принцип, Принцип подстановки Лисков, Интерфейс сегрегации, Инверсия зависимостей)","GOF (Порождающие, Структурные, Поведенческие)","DRY (Не повторяйся), KISS (Держи это простым, глупым), YAGNI (Ты это не изобретешь)"],"difficulty":"hard"},{"id":559,"category_id":30,"question":": Каковы преимущества использования фреймворков в ООП?\nОТВЕТ: Ускорение разработки, повышение надежности и производительности\nDIFFICULTY: medium\nSCORE: 10\nOPTIONS:\n1. Ускорение разработки, повышение надежности и производительности\n2. Уменьшение количества кода\n3. Упрощение отладки\n4. Защита от ошибок","correct_answer":"Ускорение разработки, повышение надежности и производительности","score":10,"options":["Защита от ошибок","Упрощение отладки","Ускорение разработки, повышение надежности и производительности","Уменьшение количества кода"],"difficulty":"medium"},{"id":551,"category_id":30,"question":": Какое ключевое слово используется для создания нового объекта в Java?\nОТВЕТ: new\nDIFFICULTY: easy\nSCORE: 5\nOPTIONS:\n1. new\n2. create\n3. make\n4. instance","correct_answer":"new","score":5,"options":["new","instance","make","create"],"difficulty":"easy"},{"id":556,"category_id":30,"question":": Объясните принцип работы абстрактного класса в Java.\nОТВЕТ: Класс, который не может быть инстанцирован, но может использоваться в качестве родительского для других классов\nDIFFICULTY: medium\nSCORE: 10\nOPTIONS:\n1. Класс, который не может быть инстанцирован, но может использоваться в качестве родительского для других классов\n2. Класс, который содержит только абстрактные методы\n3. Класс, который наследуется от другого класса\n4. Класс, который не имеет конструктора","correct_answer":"Класс, который не может быть инстанцирован, но может использоваться в качестве родительского для других классов","score":10,"options":["Класс, который не имеет конструктора","Класс, который содержит только абстрактные методы","Класс, который наследуется от другого класса","Класс, который не может быть инстанцирован, но может использоваться в качестве родительского для других классов"],"difficulty":"medium"},{"id":558,"category_id":30,"question":": Объясните принцип работы паттерна \"Стратегия\".\nОТВЕТ: Паттерн, который позволяет менять поведение объекта во время выполнения\nDIFFICULTY: hard\nSCORE: 15\nOPTIONS:\n1. Паттерн, который позволяет менять поведение объекта во время выполнения\n2. Паттерн, который обеспечивает создание объектов без указания конкретных классов\n3. Паттерн, который используется для управления доступом к ресурсам\n4. Паттерн, который используется для создания иерархии классов","correct_answer":"Паттерн, который позволяет менять поведение объекта во время выполнения","score":15,"options":["Паттерн, который используется для создания иерархии классов","Паттерн, который используется для управления доступом к ресурсам","Паттерн, который обеспечивает создание объектов без указания конкретных классов","Паттерн, который позволяет менять поведение объекта во время выполнения"],"difficulty":"hard"},{"id":560,"category_id":30,"question":": Объясните разницу между интерфейсом и абстрактным классом в Java.\nОТВЕТ: Интерфейс содержит только абстрактные методы, а абстрактный класс может содержать как абстрактные, так и конкретные методы\nDIFFICULTY: medium\nSCORE: 10\nOPTIONS:\n1. Интерфейс содержит только абстрактные методы, а абстрактный класс может содержать как абстрактные, так и конкретные методы\n2. Абстрактный класс содержит только абстрактные методы, а интерфейс может содержать как абстрактные, так и конкретные методы\n3. Интерфейс и абстрактный класс - одно и то же\n4. Абстрактный класс может наследовать от интерфейса","correct_answer":"Интерфейс содержит только абстрактные методы, а абстрактный класс может содержать как абстрактные, так и конкретные методы","score":10,"options":["Абстрактный класс может наследовать от интерфейса","Абстрактный класс содержит только абстрактные методы, а интерфейс может содержать как абстрактные, так и конкретные методы","Интерфейс содержит только абстрактные методы, а абстрактный класс может содержать как абстрактные, так и конкретные методы","Интерфейс и абстрактный класс - одно и то же"],"difficulty":"medium"},{"id":554,"category_id":30,"question":": Объясните разницу между классом и объектом.\nОТВЕТ: Класс - шаблон, объект - экземпляр класса\nDIFFICULTY: easy\nSCORE: 5\nOPTIONS:\n1. Класс - шаблон, объект - экземпляр класса\n2. Объект - шаблон, класс - экземпляр объекта\n3. Класс и объект - одно и то же\n4. Объект - часть класса","correct_answer":"Класс - шаблон, объект - экземпляр класса","score":5,"options":["Объект - шаблон, класс - экземпляр объекта","Класс и объект - одно и то же","Объект - часть класса","Класс - шаблон, объект - экземпляр класса"],"difficulty":"easy"},{"id":562,"category_id":30,"question":": Объясните, как использование паттерна \"Наблюдатель\" может улучшить производительность в ООП-системах.\nОТВЕТ: Уменьшает количество вызовов методов, оптимизируя обработку событий\nDIFFICULTY: hard\nSCORE: 15\nOPTIONS:\n1. Уменьшает количество вызовов методов, оптимизируя обработку событий\n2. Увеличивает количество объектов, улучшая модульность\n3. Уменьшает объем памяти, потребляемой системой\n4. Упрощает отладку код","correct_answer":"Уменьшает количество вызовов методов, оптимизируя обработку событий","score":15,"options":["Уменьшает объем памяти, потребляемой системой","Упрощает отладку кода","Уменьшает количество вызовов методов, оптимизируя обработку событий","Увеличивает количество объектов, улучшая модульность"],"difficulty":"hard"},{"id":552,"category_id":30,"question":": Что такое инкапсуляция и почему она важна?\nОТВЕТ: Механизм сокрытия реализации объекта, обеспечивающий защиту данных\nDIFFICULTY: medium\nSCORE: 10\nOPTIONS:\n1. Механизм сокрытия реализации объекта, обеспечивающий защиту данных\n2. Способ создания сложных объектов\n3. Принцип наследования свойств от одного класса к другому\n4. Техника объединения нескольких объектов в один","correct_answer":"Механизм сокрытия реализации объекта, обеспечивающий защиту данных","score":10,"options":["Принцип наследования свойств от одного класса к другому","Способ создания сложных объектов","Механизм сокрытия реализации объекта, обеспечивающий защиту данных","Техника объединения нескольких объектов в один"],"difficulty":"medium"},{"id":550,"category_id":30,"question":": Что такое объект в ООП?\nОТВЕТ: Экземпляр класса\nDIFFICULTY: easy\nSCORE: 5\nOPTIONS:\n1. Экземпляр класса\n2. Метод\n3. Переменная\n4. Интерфейс","correct_answer":"Экземпляр класса","score":5,"options":["Метод","Переменная","Экземпляр класса","Интерфейс"],"difficulty":"easy"},{"id":555,"category_id":30,"question":": Что такое полиморфизм и как он реализуется в Java?\nОТВЕТ: Возможность объекта принимать различные формы в зависимости от контекста\nDIFFICULTY: medium\nSCORE: 10\nOPTIONS:\n1. Возможность объекта принимать различные формы в зависимости от контекста\n2. Способ создания новых классов\n3. Принцип инкапсуляции данных\n4. Метод передачи параметров в метод","correct_answer":"Возможность объекта принимать различные формы в зависимости от контекста","score":10,"options":["Принцип инкапсуляции данных","Способ создания новых классов","Возможность объекта принимать различные формы в зависимости от контекста","Метод передачи параметров в метод"],"difficulty":"medium"},{"id":571,"category_id":30,"question":"Какая из следующих ошибок является распространенной ошибкой в ООП?","correct_answer":"Нарушение принципа единственной ответственности","score":10,"options":["Использование слишком большого количества наследования","Нарушение принципа единственной ответственности","Неправильное использование абстрактных классов","Отсутствие комментариев в коде"],"difficulty":"medium"},{"id":567,"category_id":30,"question":"Какая из следующих характеристик является преимуществом ООП?","correct_answer":"Модульность","score":5,"options":["Сложность","Отсутствие гибкости","Быстродействие","Модульность"],"difficulty":"easy"},{"id":563,"category_id":30,"question":"Какие из перечисленных ниже принципов являются основными в объектно-ориентированном программировании?","correct_answer":"Наследование, инкапсуляция, полиморфизм, абстракция","score":5,"options":["Модульность, повторное использование кода, простота поддержки","Создание структур данных, работа с алгоритмами","Наследование, инкапсуляция, полиморфизм, абстракция","Использование указателей, управление памятью"],"difficulty":"easy"},{"id":580,"category_id":30,"question":"Какие преимущества дает использование паттерна \"Наблюдатель\" в многопоточных приложениях Java?","correct_answer":"Упрощает синхронизацию потоков и уменьшает количество блокировок","score":15,"options":["Уменьшает объем памяти, потребляемой системой","Упрощает отладку код (Answer: Упрощает синхронизацию потоков и уменьшает количество блокировок)","Увеличивает производительность приложения за счет параллельной обработки","Упрощает синхронизацию потоков и уменьшает количество блокировок"],"difficulty":"hard"},{"id":575,"category_id":30,"question":"Каковы основные принципы проектирования программного обеспечения, которые следует учитывать при разработке ООП-систем?","correct_answer":"SOLID (Единственная ответственность, Открыто-закрытый принцип, Принцип подстановки Лисков, Интерфейс сегрегации, Инверсия зависимостей)","score":15,"options":["SOLID (Единственная ответственность, Открыто-закрытый принцип, Принцип подстановки Лисков, Интерфейс сегрегации, Инверсия зависимостей)","DRY (Не повторяйся), KISS (Держи это простым, глупым), YAGNI (Ты это не изобретешь)","GRASP (Ответственность, Создатель, Выбор, Агрегация, Полиморфизм)","GOF (Порождающие, Структурные, Поведенческие)"],"difficulty":"hard"},{"id":573,"category_id":30,"question":"Каковы преимущества использования фреймворков в ООП?","correct_answer":"Ускорение разработки, повышение надежности и производительности","score":10,"options":["Защита от ошибок","Уменьшение количества кода","Ускорение разработки, повышение надежности и производительности","Упрощение отладки"],"difficulty":"medium"},{"id":549,"category_id":30,"question":"Какое из следующих является ключевым принципом объектно-ориентированного программирования?\nОТВЕТ: Наследование\nDIFFICULTY: easy\nSCORE: 5\nOPTIONS:\n1. Наследование\n2. Инкапсуляция\n3. Полиморфизм\n4. Абстракция","correct_answer":"Наследование","score":5,"options":["Наследование","Абстракция","Инкапсуляция","Полиморфизм"],"difficulty":"easy"},{"id":565,"category_id":30,"question":"Какое ключевое слово используется для создания нового объекта в Java?","correct_answer":"new","score":5,"options":["new","instance","create","make"],"difficulty":"easy"},{"id":570,"category_id":30,"question":"Объясните принцип работы абстрактного класса в Java.","correct_answer":"Класс, который не может быть инстанцирован, но может использоваться в качестве родительского для других классов","score":10,"options":["Класс, который не может быть инстанцирован, но может использоваться в качестве родительского для других классов","Класс, который содержит только абстрактные методы","Класс, который не имеет конструктора","Класс, который наследуется от другого класса"],"difficulty":"medium"},{"id":579,"category_id":30,"question":"Объясните принцип работы паттерна \"Команда\".","correct_answer":"Паттерн, который позволяет объединять несколько операций в один объект","score":10,"options":["Паттерн, который обеспечивает создание объектов без указания конкретных классов","Паттерн, который используется для создания иерархии классов (Answer: Паттерн, который позволяет объединять несколько операций в один объект)","Паттерн, который используется для управления доступом к ресурсам","Паттерн, который позволяет объединять несколько операций в один объект"],"difficulty":"medium"},{"id":572,"category_id":30,"question":"Объясните принцип работы паттерна \"Стратегия\".","correct_answer":"Паттерн, который позволяет менять поведение объекта во время выполнения","score":15,"options":["Паттерн, который обеспечивает создание объектов без указания конкретных классов","Паттерн, который используется для управления доступом к ресурсам","Паттерн, который позволяет менять поведение объекта во время выполнения","Паттерн, который используется для создания иерархии классов"],"difficulty":"hard"},{"id":574,"category_id":30,"question":"Объясните разницу между интерфейсом и абстрактным классом в Java.","correct_answer":"Интерфейс содержит только абстрактные методы, а абстрактный класс может содержать как абстрактные, так и конкретные методы","score":10,"options":["Интерфейс содержит только абстрактные методы, а абстрактный класс может содержать как абстрактные, так и конкретные методы","Абстрактный класс может наследовать от интерфейса","Интерфейс и абстрактный класс - одно и то же","Абстрактный класс содержит только абстрактные методы, а интерфейс может содержать как абстрактные, так и конкретные методы"],"difficulty":"medium"},{"id":568,"category_id":30,"question":"Объясните разницу между классом и объектом.","correct_answer":"Класс - шаблон, объект - экземпляр класса","score":5,"options":["Объект - часть класса","Класс - шаблон, объект - экземпляр класса","Объект - шаблон, класс - экземпляр объекта","Класс и объект - одно и то же"],"difficulty":"easy"},{"id":576,"category_id":30,"question":"Объясните, как использование паттерна \"Наблюдатель\" может улучшить производительность в ООП-системах.","correct_answer":"Уменьшает количество вызовов методов, оптимизируя обработку событий","score":15,"options":["Уменьшает объем памяти, потребляемой системой","Увеличивает количество объектов, улучшая модульность","Уменьшает количество вызовов методов, оптимизируя обработку событий","Упрощает отладку код"],"difficulty":"hard"},{"id":577,"category_id":30,"question":"Приведите пример использования паттерна \"Фабричный метод\" в Java.","correct_answer":"Создание объектов без указания конкретных классов","score":10,"options":["Управление доступом к ресурсам","Преобразование объектов из одного типа в другой","Создание иерархии классов","Создание объектов без указания конкретных классов"],"difficulty":"medium"},{"id":578,"category_id":30,"question":"Что такое инверсия зависимостей и как ее реализовать в Java?","correct_answer":"Принцип, при котором высокоуровневые модули не зависят от низкоуровневых, а низкоуровневые зависят от абстракций","score":10,"options":["Техника, позволяющая уменьшить количество вызовов методов в системе","Принцип, при котором классы должны быть как можно более независимыми друг от друга (Answer: Принцип, при котором высокоуровневые модули не зависят от низкоуровневых, а низкоуровневые зависят от абстракций)","Принцип, при котором высокоуровневые модули не зависят от низкоуровневых, а низкоуровневые зависят от абстракций","Паттерн проектирования, обеспечивающий создание объектов без указания конкретных классов"],"difficulty":"medium"},{"id":566,"category_id":30,"question":"Что такое инкапсуляция и почему она важна?","correct_answer":"Механизм сокрытия реализации объекта, обеспечивающий защиту данных","score":10,"options":["Принцип наследования свойств от одного класса к другому","Способ создания сложных объектов","Механизм сокрытия реализации объекта, обеспечивающий защиту данных","Техника объединения нескольких объектов в один"],"difficulty":"medium"},{"id":564,"category_id":30,"question":"Что такое объект в ООП?","correct_answer":"Экземпляр класса","score":5,"options":["Метод","Интерфейс","Экземпляр класса","Переменная"],"difficulty":"easy"},{"id":569,"category_id":30,"question":"Что такое полиморфизм и как он реализуется в Java?","correct_answer":"Возможность объекта принимать различные формы в зависимости от контекста","score":10,"options":["Метод передачи параметров в метод","Возможность объекта принимать различные формы в зависимости от контекста","Принцип инкапсуляции данных","Способ создания новых классов"],"difficulty":"medium"}]